from calendar import MONDAY
import slack
import os
import schedule
import time
from pathlib import Path
from dotenv import load_dotenv
from random import shuffle, choice
from slackeventsapi import SlackEventAdapter
from datetime import datetime, timedelta
from flask import Flask, request, Response


env_path = Path('.') / '.env'
load_dotenv(dotenv_path=env_path)

app = Flask(__name__)
slack_event_adapter  = SlackEventAdapter(os.environ['SIGNING_SECRET'], '/slack/events', app)
client = slack.WebClient(token=os.environ['SLACK_TOKEN'])
BOT_ID = client.api_call("auth.test")['user_id']

members_list = []
members_pairs1 = []
members_pairs2 = []
three_mem_grp = []
three_mem_grp2 = []
the_check = False


def final_check(mem_list_num):
    counts = 0
    check = False
    break_out_flag = False
    with open ('previousPairs.txt','r') as p :
        members_pairs3 = [pairs.rstrip() for pairs in p]
        members_pairs2 = list(map(eval, members_pairs3))
        ##print("this is the type of members_pairs3: ",type(members_pairs3))
        p.close()
    ##print("this is members_pairs2",members_pairs2)
    for g in mem_list_num:
        ##print(g, "this is the type of g: ", type(g))
        ##print("they are getting checked")
        for m in members_pairs2:

            ##print(m, "this is the type of m: ", type(m))
            gSorted = sorted(g)
            mSorted = sorted(m)
            if (gSorted != mSorted):
                ##print("this is g2" + str(gSorted))
                ##print("this is m1 " + str(mSorted))
                ##print("they are not the same")
                counts += 1
                ##print (counts)
                ##print(len(members_pairs2)*len(members_pairs1))
                if counts == (len(members_pairs2)*len(members_pairs1)):
                    print("the counter finished")
                else:
                    print("not not")
            elif (gSorted == mSorted):
                ##print("they are the same")
                ##print("this is sorted m: ", str(mSorted))
                ##print("this is sorted m: ", str(gSorted))
                check = True
                ##print(check)
                counts = 0
                break_out_flag = True
                break
        if break_out_flag:
            break_out_flag = False
            break
    ##print (counts)
    ##print(len(members_pairs2)*len(members_pairs1))
    ##print("this is check 2 ", check)    
    if check == True:
        ##print("check true")
        check = False
        pairs()
        return
    if counts == (len(members_pairs2)*len(members_pairs1)):
        ##print("the counter finished")
        prev_zero()
        return


def final_check2(three_mem):
    with open('previous3.txt','r') as y:
        three_mem_grp2 = [pairs3.rstrip() for pairs3 in y]
        ##three_mem_grp3 = list(map(eval, three_mem_grp2))
        ##print("this is the type of members_pairs3: ",type(three_mem_grp2))
        y.close()
    l4 = sorted(three_mem_grp2)
    l5 = sorted(three_mem)
    temp_list = []
    if l5 == l4:
        for w in three_mem:
            ##print("this is the element" + w)
            temp_list.append(w)
            three_mem.remove(w)
            ##print("this is the group 3 " + str(three_mem))
        ats.extend(temp_list)
        three_mem_grp.clear()
        ##print("this is the 3 member group" + str(three_mem_grp) )
        three_grp1()
    else:
        print("they are not the same")




def task():
    with open('previous3.txt','w') as t:
        t.truncate(0)
        for h in three_mem_grp:
            t.write("%s\n" % str(h))
        t.close()
    pairs()
    if os.path.getsize('previousPairs.txt') == 0:
        ##print("starting 0")
        prev_zero()
        message()
    ##print("this is the The check: ", the_check)
    print('Done')
    message()
    return

def prev_zero():
    with open ('previousPairs.txt','w') as f:
        for item in members_pairs1:
            ##print(item)
            f.write("%s\n" % str(item))
            ##print(f)
        f.close()
    return
def message():
    new_numbers1 = ' '.join(str(e) for e in members_pairs1)
    client.chat_postMessage(channel = '#test',
    text= new_numbers1)
    client.chat_postMessage(channel = '#test', text = three_mem_grp)
    client.chat_postMessage(channel = '#test',
    text="This month's groups")
    return
def pairs():
    members_pairs1.clear()
    shuffle(ats)
    for p1, p2 in zip(ats[::2], ats[1::2]):
        group_1 = (p1, p2)
        members_pairs1.append(group_1)
        ##print("these are the pairs " + str(members_pairs1))
    final_check(members_pairs1)
    return


def three_grp1():
    shuffle(ats)
    for i in range(0,3):
        grp_member = choice(ats)
        ##print("choice" + str(grp_member))
        three_mem_grp.append(grp_member)
        ats.remove(grp_member)
        ##print("this is what was removed from ats" + str(ats))
    ##print("the three groups" + str(three_mem_grp))
    final_check2(three_mem_grp)
    task()
    return
    

starting_count = [0]
def counter():
    new_count = starting_count[-1] + 1
    starting_count.append(new_count)
    latest_count = starting_count[-1]
    ##print(latest_count)
    return latest_count
ats =[]
def start():
    request = client.api_call("users.list")
    if request['ok']:
        for item in request['members']:
            members_list.append(item['id'])
        shuffle(members_list)
        global ats
        ats = [' <@' + mem + '> ' for mem in members_list]
        members_list.clear()
        ##print(members_list)
        ##print("this is the ats" + str(ats))
        if (len(ats) % 2) != 0:
            three_grp1()
            return
        else:
            task()
            return
start()


while True:
    schedule.run_pending()
    time.sleep(10)
